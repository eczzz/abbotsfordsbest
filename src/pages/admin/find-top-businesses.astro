---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import BusinessSubmissionEditModal from '../../components/BusinessSubmissionEditModal.astro';
import { getSupabase } from '../../lib/supabaseClient.js';

// Check authentication and admin role
const supabase = getSupabase(Astro);
const { data: { session } } = await supabase.auth.getSession();

if (!session) {
  return Astro.redirect('/admin/login');
}

// Check if user has admin role
const { data: profile, error: profileError } = await supabase
  .from('profiles')
  .select('role')
  .eq('id', session.user.id)
  .single();

if (profileError) {
  console.error('Error fetching profile:', profileError);
}

if (profileError || !profile || profile.role !== 'admin') {
  return Astro.redirect('/');
}

// Fetch categories for the edit modal
const { data: categories, error: categoriesError } = await supabase
  .from('category_pages')
  .select('category_name, slug')
  .order('category_name');

if (categoriesError) {
  console.error('Error fetching categories:', categoriesError);
}
---

<Layout title="Find Top Businesses - Admin Panel" description="Find top businesses in any category and city using AI">
  <Header />

  <!-- Admin Header -->
  <section class="bg-gray-900 text-white py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-bold mb-2">Find Top Businesses</h1>
          <p class="text-gray-300">Discover the top 3 businesses in any category and city using AI</p>
        </div>
        <div class="flex space-x-4">
          <a href="/admin/submissions" class="bg-primary-600 px-4 py-2 rounded-lg hover:bg-primary-700 transition-colors duration-200">
            Back to Submissions
          </a>
          <a href="/admin/categories" class="bg-gray-600 px-4 py-2 rounded-lg hover:bg-gray-700 transition-colors duration-200">
            Manage Categories
          </a>
        </div>
      </div>
    </div>
  </section>

  <!-- Search Form -->
  <section class="py-8 bg-white">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white rounded-2xl shadow-lg p-8">
        <div class="mb-6">
          <h2 class="text-2xl font-bold text-gray-900 mb-4">Search for Top Businesses</h2>
          <p class="text-gray-600">
            Enter a business category and city to find the top 3 businesses using AI. 
            The AI will research and extract complete business information for each result.
          </p>
        </div>

        <form id="search-form" class="space-y-6">
          <!-- Category Name -->
          <div>
            <label for="category-name" class="block text-sm font-medium text-gray-700 mb-2">
              Business Category *
            </label>
            <input 
              type="text" 
              id="category-name" 
              name="category-name" 
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="e.g., Auto Glass Repair, Italian Restaurants, Hair Salons"
            />
            <p class="text-sm text-gray-500 mt-2">
              Be specific about the type of business you're looking for
            </p>
          </div>

          <!-- City Name -->
          <div>
            <label for="city-name" class="block text-sm font-medium text-gray-700 mb-2">
              City Name *
            </label>
            <input 
              type="text" 
              id="city-name" 
              name="city-name" 
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="e.g., Abbotsford, Vancouver, Toronto"
            />
            <p class="text-sm text-gray-500 mt-2">
              Include province/state if needed for clarity (e.g., "Abbotsford, BC")
            </p>
          </div>

          <!-- Search Button -->
          <div class="text-center">
            <button 
              type="submit"
              id="search-btn"
              class="bg-primary-700 text-white px-8 py-3 rounded-xl hover:bg-primary-800 transition-colors duration-200 font-medium text-lg disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span id="search-btn-text">Find Top 3 Businesses</span>
              <svg id="search-loading-spinner" class="hidden animate-spin -mr-1 ml-3 h-5 w-5 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </button>
          </div>
        </form>

        <!-- Status Messages -->
        <div id="search-status-message" class="mt-6 hidden">
          <div id="search-success-message" class="hidden bg-green-50 border border-green-200 rounded-xl p-4">
            <div class="flex">
              <svg class="w-5 h-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
              </svg>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-green-800">Businesses Found Successfully!</h3>
                <p class="text-sm text-green-700 mt-1">Review the businesses below and click "Review & Add" to add them to your database.</p>
              </div>
            </div>
          </div>
          
          <div id="search-error-message" class="hidden bg-red-50 border border-red-200 rounded-xl p-4">
            <div class="flex">
              <svg class="w-5 h-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
              </svg>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800">Search Failed</h3>
                <p id="search-error-text" class="text-sm text-red-700 mt-1">Please try again with different search terms.</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Instructions -->
        <div class="mt-8 bg-blue-50 border border-blue-200 rounded-xl p-6">
          <h3 class="text-lg font-semibold text-blue-900 mb-3">How It Works</h3>
          <ol class="list-decimal list-inside space-y-2 text-sm text-blue-800">
            <li>Enter a specific business category (e.g., "Auto Glass Repair", "Italian Restaurants")</li>
            <li>Enter the city name where you want to find businesses</li>
            <li>Click "Find Top 3 Businesses" to start the AI search</li>
            <li>The AI will research and find the top-rated businesses in that category</li>
            <li>Review each business result and click "Review & Add" to add them to your database</li>
            <li>Make any necessary edits in the popup form before saving</li>
          </ol>
          
          <div class="mt-4 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
            <p class="text-sm text-yellow-800">
              <strong>Note:</strong> AI results may not be 100% accurate. Always review the extracted data before saving.
              The AI will attempt to find complete contact information including websites and email addresses.
            </p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Results Section -->
  <section id="results-section" class="py-8 bg-gray-50 hidden">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="mb-8">
        <h2 class="text-2xl font-bold text-gray-900 mb-4">Search Results</h2>
        <p class="text-gray-600">Top 3 businesses found for your search criteria</p>
      </div>
      
      <div id="business-results" class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Results will be populated here by JavaScript -->
      </div>
    </div>
  </section>

  <!-- Business Edit Modal -->
  <BusinessSubmissionEditModal categories={categories || []} />

  <Footer />
</Layout>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('search-form');
  const searchBtn = document.getElementById('search-btn');
  const searchBtnText = document.getElementById('search-btn-text');
  const searchLoadingSpinner = document.getElementById('search-loading-spinner');
  const searchStatusMessage = document.getElementById('search-status-message');
  const searchSuccessMessage = document.getElementById('search-success-message');
  const searchErrorMessage = document.getElementById('search-error-message');
  const searchErrorText = document.getElementById('search-error-text');
  const resultsSection = document.getElementById('results-section');
  const businessResults = document.getElementById('business-results');

  function showSearchLoading() {
    searchBtn.disabled = true;
    searchBtnText.textContent = 'Searching...';
    searchLoadingSpinner.classList.remove('hidden');
    searchStatusMessage.classList.add('hidden');
    searchSuccessMessage.classList.add('hidden');
    searchErrorMessage.classList.add('hidden');
    resultsSection.classList.add('hidden');
  }

  function hideSearchLoading() {
    searchBtn.disabled = false;
    searchBtnText.textContent = 'Find Top 3 Businesses';
    searchLoadingSpinner.classList.add('hidden');
  }

  function showSearchSuccess() {
    searchStatusMessage.classList.remove('hidden');
    searchSuccessMessage.classList.remove('hidden');
    searchErrorMessage.classList.add('hidden');
  }

  function showSearchError(message) {
    searchStatusMessage.classList.remove('hidden');
    searchErrorMessage.classList.remove('hidden');
    searchSuccessMessage.classList.add('hidden');
    searchErrorText.textContent = message;
  }

  function displayBusinessResults(businesses) {
    businessResults.innerHTML = '';
    
    businesses.forEach((business, index) => {
      const businessCard = document.createElement('div');
      businessCard.className = 'bg-white rounded-2xl shadow-lg p-6 hover:shadow-xl transition-shadow duration-300';
      
      businessCard.innerHTML = `
        <div class="mb-4">
          <div class="flex items-center justify-between mb-2">
            <h3 class="text-xl font-bold text-gray-900">${business.name || 'Business Name'}</h3>
            <span class="bg-primary-100 text-primary-800 px-3 py-1 rounded-full text-sm font-medium">#${index + 1}</span>
          </div>
          <p class="text-gray-600 text-sm mb-3">${business.description || 'No description available'}</p>
        </div>
        
        <div class="space-y-2 mb-4 text-sm text-gray-700">
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            <span>${business.address || 'Address not available'}</span>
          </div>
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
            </svg>
            <span>${business.phone || 'Phone not available'}</span>
          </div>
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
            </svg>
            <span>${business.email || 'Email not available'}</span>
          </div>
          <div class="flex items-center">
            <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"></path>
            </svg>
            <span>${business.website || 'Website not available'}</span>
          </div>
        </div>
        
        <div class="flex flex-wrap gap-2 mb-4">
          ${(business.categories || []).map(category => 
            `<span class="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium">${category}</span>`
          ).join('')}
        </div>
        
        <button 
          class="w-full bg-primary-700 text-white px-4 py-2 rounded-xl hover:bg-primary-800 transition-colors duration-200 font-medium review-add-btn business-action-btn"
          id="process-btn-${index}"
          data-business-index="${index}"
        >
          Review & Add Business
        </button>
      `;
      
      businessResults.appendChild(businessCard);
    });
    
    // Add event listeners to review buttons
    document.querySelectorAll('.review-add-btn').forEach(button => {
      button.addEventListener('click', function() {
        const businessIndex = parseInt(this.dataset.businessIndex);
        const business = businesses[businessIndex];
        
        // Dispatch custom event to open edit modal with extracted data
        const event = new CustomEvent('openBusinessEditModal', {
          detail: { 
            submissionId: null, // null indicates this is a new submission
            extractedData: business,
            reloadOnSuccess: false, // Don't reload page for search results
            businessIndex: businessIndex // Pass the index to identify which card to update
          }
        });
        document.dispatchEvent(event);
      });
    });
    
    resultsSection.classList.remove('hidden');
  }

  // Handle business processed event
  document.addEventListener('businessProcessed', function(e) {
    const { shouldReloadPage, businessData, businessIndex } = e.detail;
    
    if (shouldReloadPage) {
      // This shouldn't happen on this page, but handle it just in case
      window.location.reload();
    } else {
      // Update only the specific business card that was processed
      if (typeof businessIndex === 'number') {
        const specificButton = document.getElementById(`process-btn-${businessIndex}`);
        if (specificButton) {
          specificButton.textContent = 'Added Successfully';
          specificButton.disabled = true;
          specificButton.classList.remove('bg-primary-700', 'hover:bg-primary-800');
          specificButton.classList.add('bg-green-600', 'cursor-not-allowed');
        }
      }
    }
  });
  form?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(form);
    const categoryName = formData.get('category-name');
    const cityName = formData.get('city-name');
    
    if (!categoryName || !cityName) {
      showSearchError('Please enter both category and city name.');
      return;
    }

    showSearchLoading();

    try {
      const response = await fetch('/api/admin/find-top-businesses', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          categoryName: categoryName.trim(),
          cityName: cityName.trim()
        })
      });

      const result = await response.json();

      if (response.ok && result.success) {
        hideSearchLoading();
        showSearchSuccess();
        displayBusinessResults(result.data);
      } else {
        hideSearchLoading();
        showSearchError(result.error || 'Failed to find businesses. Please try again with different search terms.');
      }
    } catch (error) {
      console.error('Error:', error);
      hideSearchLoading();
      showSearchError('Network error. Please check your connection and try again.');
    }
  });
});
</script>
</Layout>