---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { getSupabase } from '../../lib/supabaseClient.js';

// Check authentication and admin role
const supabase = getSupabase(Astro);
const { data: { session } } = await supabase.auth.getSession();

if (!session) {
  return Astro.redirect('/admin/login');
}

// Check if user has admin role
const { data: profile, error: profileError } = await supabase
  .from('profiles')
  .select('role')
  .eq('id', session.user.id)
  .single();

if (profileError) {
  console.error('Error fetching profile:', profileError);
}

if (profileError || !profile || profile.role !== 'admin') {
  return Astro.redirect('/');
}

// Declare slug variable to prevent ReferenceError
const slug = undefined;

// Fetch all category pages
const { data: categories, error: categoriesError } = await supabase
  .from('category_pages')
  .select('*')
  .order('created_at', { ascending: false });

if (categoriesError) {
  console.error('Error fetching categories:', categoriesError);
}

// Fetch approved businesses for the featured business dropdowns
const { data: businesses, error: businessesError } = await supabase
  .from('business_submissions')
  .select('id, name')
  .eq('status', 'approved')
  .order('name');

if (businessesError) {
  console.error('Error fetching businesses:', businessesError);
}
---

<Layout title="Category Management - Admin Panel" description="Manage business category pages">
  <Header />

  <!-- Admin Header -->
  <section class="bg-gray-900 text-white py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-3xl font-bold mb-2">Category Management</h1>
          <p class="text-gray-300">Create and manage business category pages</p>
        </div>
        <div class="flex space-x-4">
          <a href="/admin/submissions" class="bg-primary-600 px-4 py-2 rounded-lg hover:bg-primary-700 transition-colors duration-200">
            Back to Submissions
          </a>
          <button id="create-category-btn" class="bg-green-600 px-4 py-2 rounded-lg hover:bg-green-700 transition-colors duration-200">
            Create New Category
          </button>
        </div>
      </div>
    </div>
  </section>

  <!-- Categories List -->
  <section class="py-8 bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white rounded-2xl shadow-lg overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-xl font-semibold text-gray-900">Category Pages</h2>
        </div>
        
        {categories && categories.length > 0 ? (
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Slug</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Featured Businesses</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                {categories.map((category) => (
                  <tr class="hover:bg-gray-50">
                    <td class="px-6 py-4">
                      <div>
                        <div class="text-sm font-medium text-gray-900">{category.category_name}</div>
                        <div class="text-sm text-gray-500 truncate max-w-xs">{category.page_title}</div>
                      </div>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-900">
                      <a href={`/${category.slug}`} class="text-primary-600 hover:text-primary-800">
                        /{category.slug}
                      </a>
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-500">
                      {[category.featured_business_1_id, category.featured_business_2_id, category.featured_business_3_id]
                        .filter(Boolean).length} featured
                    </td>
                    <td class="px-6 py-4 text-sm text-gray-500">
                      {new Date(category.created_at).toLocaleDateString()}
                    </td>
                    <td class="px-6 py-4">
                      <div class="flex space-x-2">
                        <button 
                          data-action="edit" 
                          data-category-id={category.id}
                          class="bg-blue-600 text-white px-3 py-1 rounded-lg text-xs font-medium hover:bg-blue-700 transition-colors duration-200"
                        >
                          Edit
                        </button>
                        <button 
                          data-action="delete" 
                          data-category-id={category.id}
                          class="bg-red-600 text-white px-3 py-1 rounded-lg text-xs font-medium hover:bg-red-700 transition-colors duration-200"
                        >
                          Delete
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div class="px-6 py-12 text-center">
            <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
            <h3 class="text-lg font-medium text-gray-900 mb-2">No categories yet</h3>
            <p class="text-gray-500">Create your first category page to get started.</p>
          </div>
        )}
      </div>
    </div>
  </section>

  <!-- Category Form Modal -->
  <div id="category-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-2xl shadow-xl max-w-2xl w-full max-h-screen overflow-y-auto">
        <div class="px-6 py-4 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <h3 id="modal-title" class="text-lg font-semibold text-gray-900">Create Category Page</h3>
            <button id="close-modal" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
        
        <form id="category-form" class="p-6 space-y-6">
          <input type="hidden" id="category-id" name="category-id" />
          
          <!-- Page Title -->
          <div>
            <label for="page-title" class="block text-sm font-medium text-gray-700 mb-2">
              Page Title *
            </label>
            <input 
              type="text" 
              id="page-title" 
              name="page-title" 
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="e.g., Abbotsford Auto Glass Repair - Abbotsford's Best"
            />
            <p class="text-sm text-gray-500 mt-1">This will be used as the HTML title and main heading</p>
          </div>

          <!-- Category Name -->
          <div>
            <label for="category-name" class="block text-sm font-medium text-gray-700 mb-2">
              Category Name *
            </label>
            <input 
              type="text" 
              id="category-name" 
              name="category-name" 
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="e.g., Auto Glass Repair"
            />
            <p class="text-sm text-gray-500 mt-1">This will appear in the business submission dropdown</p>
          </div>

          <!-- Slug -->
          <div>
            <label for="slug" class="block text-sm font-medium text-gray-700 mb-2">
              Page Slug *
            </label>
            <input 
              type="text" 
              id="slug" 
             name="slug"
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="e.g., auto-glass-repair"
            />
            <p class="text-sm text-gray-500 mt-1">URL-friendly version (lowercase, hyphens only). Will be: /{slug}</p>
          </div>

          <!-- Description -->
          <div>
            <label for="description" class="block text-sm font-medium text-gray-700 mb-2">
              Page Description *
            </label>
            <textarea 
              id="description" 
              name="description" 
              rows="4" 
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="Describe this category and what visitors can expect to find..."
            ></textarea>
            <p class="text-sm text-gray-500 mt-1">This will be used for SEO meta description and hero text</p>
          </div>

          <!-- Icon Name -->
          <div>
            <label for="icon-name" class="block text-sm font-medium text-gray-700 mb-2">
              Icon Name *
            </label>
            <input 
              type="text" 
              id="icon-name" 
              name="icon-name" 
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="e.g., Car, Utensils, Home, Briefcase"
            />
            <p class="text-sm text-gray-500 mt-1">
              Lucide icon name (see <a href="https://lucide.dev/icons/" target="_blank" class="text-primary-600 hover:text-primary-800">lucide.dev/icons</a> for available icons)
            </p>
          </div>

          <!-- Featured Businesses -->
          <div class="space-y-4">
            <h4 class="text-lg font-medium text-gray-900">Featured Businesses</h4>
            <p class="text-sm text-gray-600">Select up to 3 approved businesses to feature on this category page</p>
            
            {[1, 2, 3].map((num) => (
              <div>
                <label for={`featured-business-${num}`} class="block text-sm font-medium text-gray-700 mb-2">
                  Featured Business {num}
                </label>
                <select 
                  id={`featured-business-${num}`} 
                  name={`featured-business-${num}`}
                  class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                >
                  <option value="">Select a business (optional)</option>
                  {businesses && businesses.map((business) => (
                    <option value={business.id}>{business.name}</option>
                  ))}
                </select>
              </div>
            ))}
          </div>

          <!-- Submit Button -->
          <div class="flex justify-end space-x-4 pt-6 border-t border-gray-200">
            <button 
              type="button"
              id="cancel-btn"
              class="px-6 py-3 border border-gray-300 rounded-xl text-gray-700 hover:bg-gray-50 transition-colors duration-200"
            >
              Cancel
            </button>
            <button 
              type="submit"
              class="px-6 py-3 bg-primary-700 text-white rounded-xl hover:bg-primary-800 transition-colors duration-200"
            >
              Save Category
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <Footer />
</Layout>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const modal = document.getElementById('category-modal');
  const form = document.getElementById('category-form');
  const modalTitle = document.getElementById('modal-title');
  const createBtn = document.getElementById('create-category-btn');
  const closeBtn = document.getElementById('close-modal');
  const cancelBtn = document.getElementById('cancel-btn');

  // Auto-generate slug from category name
  const categoryNameInput = document.getElementById('category-name');
  const slugInput = document.getElementById('slug');
  
  categoryNameInput?.addEventListener('input', function() {
    if (!slugInput.dataset.manuallyEdited) {
      const slug = this.value
        .toLowerCase()
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .replace(/^-|-$/g, '');
      slugInput.value = slug;
    }
  });

  slugInput?.addEventListener('input', function() {
    this.dataset.manuallyEdited = 'true';
  });

  // Open modal for creating new category
  createBtn?.addEventListener('click', function() {
    modalTitle.textContent = 'Create Category Page';
    form.reset();
    document.getElementById('category-id').value = '';
    slugInput.dataset.manuallyEdited = '';
    modal.classList.remove('hidden');
  });

  // Close modal
  function closeModal() {
    modal.classList.add('hidden');
  }

  closeBtn?.addEventListener('click', closeModal);
  cancelBtn?.addEventListener('click', closeModal);

  // Close modal when clicking outside
  modal?.addEventListener('click', function(e) {
    if (e.target === modal) {
      closeModal();
    }
  });

  // Handle edit buttons
  document.querySelectorAll('[data-action="edit"]').forEach(button => {
    button.addEventListener('click', async function() {
      const categoryId = this.dataset.categoryId;
     console.log('Frontend: Edit button clicked for category ID:', categoryId);
      
      try {
        const response = await fetch(`/api/admin/categories/${categoryId}`);
        if (response.ok) {
          const category = await response.json();
         console.log('Frontend: Received category data:', category);
          
          modalTitle.textContent = 'Edit Category Page';
          document.getElementById('category-id').value = category.id;
         console.log('Frontend: Set hidden category-id field to:', category.id);
          document.getElementById('page-title').value = category.page_title;
          document.getElementById('category-name').value = category.category_name;
          document.getElementById('slug').value = category.slug;
          document.getElementById('description').value = category.description;
          document.getElementById('icon-name').value = category.icon_name || 'Building';
          
          // Set featured businesses
          document.getElementById('featured-business-1').value = category.featured_business_1_id || '';
          document.getElementById('featured-business-2').value = category.featured_business_2_id || '';
          document.getElementById('featured-business-3').value = category.featured_business_3_id || '';
          
          slugInput.dataset.manuallyEdited = 'true';
          modal.classList.remove('hidden');
        }
      } catch (error) {
        console.error('Error fetching category:', error);
        alert('Error loading category data');
      }
    });
  });

  // Handle delete buttons
  document.querySelectorAll('[data-action="delete"]').forEach(button => {
    button.addEventListener('click', async function() {
      const categoryId = this.dataset.categoryId;
      
      if (!confirm('Are you sure you want to delete this category page? This action cannot be undone.')) {
        return;
      }
      
      try {
        const response = await fetch('/api/admin/categories/delete', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ id: categoryId })
        });
        
        if (response.ok) {
          window.location.reload();
        } else {
          alert('Error deleting category');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error deleting category');
      }
    });
  });

  // Handle form submission
  form?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitButton = form.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.textContent = 'Saving...';
    submitButton.disabled = true;
    
    try {
      const formData = new FormData(form);
      const categoryId = formData.get('category-id');
      
      const data = {
        page_title: formData.get('page-title'),
        category_name: formData.get('category-name'),
        slug: formData.get('slug'),
        description: formData.get('description'),
        icon_name: formData.get('icon-name'),
        featured_business_1_id: formData.get('featured-business-1') || null,
        featured_business_2_id: formData.get('featured-business-2') || null,
        featured_business_3_id: formData.get('featured-business-3') || null
      };
      
      const url = categoryId ? '/api/admin/categories/update' : '/api/admin/categories/create';
      if (categoryId) {
        data.id = categoryId;
      }
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
      });
      
      if (response.ok) {
        window.location.reload();
      } else {
        try {
          const error = await response.json();
          const errorMessage = error.details 
            ? `${error.error}: ${error.details}` 
            : error.error || 'Failed to save category';
          console.error('Category save error:', error);
          alert(`Error saving category: ${errorMessage}`);
        } catch (parseError) {
          console.error('Failed to parse error response:', parseError);
          alert('Error saving category: Unable to parse server response');
        }
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error saving category');
    } finally {
      submitButton.textContent = originalText;
      submitButton.disabled = false;
    }
  });
});
</script>
</Layout>