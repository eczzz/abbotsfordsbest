---
export interface Props {
  categories: Array<{
    category_name: string;
    slug: string;
  }>;
}

const { categories } = Astro.props;
---

<!-- Business Submission Edit Modal -->
<div id="business-edit-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-2xl shadow-xl max-w-4xl w-full max-h-screen overflow-y-auto">
      <div class="px-6 py-4 border-b border-gray-200">
        <div class="flex items-center justify-between">
          <h3 id="business-modal-title" class="text-lg font-semibold text-gray-900">Edit Business Submission</h3>
          <button id="close-business-modal" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>
      
      <form id="business-edit-form" class="p-6 space-y-6">
        <!-- Success/Error Messages -->
        <div id="modal-form-message" class="hidden">
          <div id="modal-success-message" class="hidden bg-green-50 border border-green-200 rounded-xl p-4">
            <div class="flex">
              <svg class="w-5 h-5 text-green-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
              </svg>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-green-800">Success!</h3>
                <p id="modal-success-text" class="text-sm text-green-700 mt-1">Business submission updated successfully!</p>
              </div>
            </div>
          </div>
          
          <div id="modal-error-message" class="hidden bg-red-50 border border-red-200 rounded-xl p-4">
            <div class="flex">
              <svg class="w-5 h-5 text-red-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
              </svg>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800">Error</h3>
                <p id="modal-error-text" class="text-sm text-red-700 mt-1">There was an error updating the business.</p>
              </div>
            </div>
          </div>
        </div>

        <input type="hidden" id="submission-id" name="submission-id" />
        <input type="hidden" id="current-logo-url" name="current-logo-url" />
        
        <!-- Business Name -->
        <div>
          <label for="edit-business-name" class="block text-sm font-medium text-gray-700 mb-2">
            Business Name *
          </label>
          <input 
            type="text" 
            id="edit-business-name" 
            name="business-name" 
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            placeholder="Enter business name"
          />
        </div>

        <!-- Logo Upload -->
        <div>
          <label for="edit-logo" class="block text-sm font-medium text-gray-700 mb-2">
            Business Logo
          </label>
          <div id="edit-logo-preview" class="mb-4 hidden">
            <img id="current-logo" src="" alt="Current logo" class="w-20 h-20 rounded-lg object-cover" />
            <p class="text-sm text-gray-600 mt-2">Current logo</p>
          </div>
          <div class="border-2 border-dashed border-gray-300 rounded-xl p-6 text-center hover:border-primary-400 transition-colors duration-200">
            <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
            </svg>
            <p class="text-gray-600 mb-2">Click to upload or drag and drop</p>
            <p class="text-sm text-gray-500">PNG, JPG, GIF up to 2MB</p>
            <input type="file" id="edit-logo" name="logo" accept="image/*" class="hidden" />
          </div>
        </div>

        <!-- Address -->
        <div>
          <label for="edit-address" class="block text-sm font-medium text-gray-700 mb-2">
            Business Address *
          </label>
          <input 
            type="text" 
            id="edit-address" 
            name="address" 
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            placeholder="123 Main Street, Abbotsford, BC"
          />
        </div>

        <!-- Phone & Email -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="edit-phone" class="block text-sm font-medium text-gray-700 mb-2">
              Phone Number *
            </label>
            <input 
              type="tel" 
              id="edit-phone" 
              name="phone" 
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="(604) 555-1234"
            />
          </div>
          <div>
            <label for="edit-email" class="block text-sm font-medium text-gray-700 mb-2">
              Email Address *
            </label>
            <input 
              type="email" 
              id="edit-email" 
              name="email" 
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="hello@yourbusiness.com"
            />
          </div>
        </div>

        <!-- Website -->
        <div>
          <label for="edit-website" class="block text-sm font-medium text-gray-700 mb-2">
            Website URL *
          </label>
          <input 
            type="url" 
            id="edit-website" 
            name="website" 
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            placeholder="https://www.yourbusiness.com"
          />
        </div>

        <!-- Categories -->
        <div>
          <label for="edit-categories" class="block text-sm font-medium text-gray-700 mb-2">
            Business Categories *
          </label>
          <select 
            id="edit-categories" 
            name="categories" 
            multiple 
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
          >
            {categories && categories.map((category) => (
              <option value={category.slug}>{category.category_name}</option>
            ))}
          </select>
          <p class="text-sm text-gray-500 mt-2">Hold Ctrl/Cmd to select multiple categories</p>
          <div id="edit-categories-error" class="text-red-600 text-sm mt-1 hidden">
            Please select at least one category or suggest a new category below.
          </div>
        </div>

        <!-- Suggest New Category -->
        <div>
          <label for="edit-new-category" class="block text-sm font-medium text-gray-700 mb-2">
            Suggest New Category (Optional)
          </label>
          <div class="flex space-x-3">
            <input 
              type="text" 
              id="edit-new-category" 
              name="new-category"
              class="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="e.g., Pet Services, Tutoring, etc."
            />
            <button 
              type="button"
              id="create-category-btn"
              class="hidden bg-green-600 text-white px-4 py-3 rounded-xl hover:bg-green-700 transition-colors duration-200 font-medium whitespace-nowrap disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <span id="create-category-btn-text">Create Category</span>
              <svg id="create-category-spinner" class="hidden animate-spin -mr-1 ml-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </button>
          </div>
          <p class="text-sm text-gray-500 mt-2">
            If you suggest a new category, you don't need to select from the categories above. New categories require admin approval.
          </p>
          <div id="category-creation-message" class="mt-2 hidden">
            <div id="category-creation-success" class="hidden text-sm text-green-600 bg-green-50 border border-green-200 rounded-lg p-2">
              <span id="category-creation-success-text"></span>
            </div>
            <div id="category-creation-error" class="hidden text-sm text-red-600 bg-red-50 border border-red-200 rounded-lg p-2">
              <span id="category-creation-error-text"></span>
            </div>
          </div>
        </div>

        <!-- Featured Categories -->
        <div id="featured-categories-section" class="hidden">
          <h4 class="text-lg font-medium text-gray-900 mb-3">Featured Business Status</h4>
          <p class="text-sm text-gray-600 mb-4">
            Select which categories this business should be featured in. Featured businesses appear prominently on category pages.
          </p>
          <div id="featured-categories-container" class="space-y-3">
            <!-- Featured category checkboxes will be populated here by JavaScript -->
          </div>
        </div>

        <!-- Business Description -->
        <div>
          <label for="edit-description" class="block text-sm font-medium text-gray-700 mb-2">
            Business Description *
          </label>
          <textarea 
            id="edit-description" 
            name="description" 
            rows="4" 
            required
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            placeholder="Describe your business, services, and what makes you special..."
          ></textarea>
        </div>

        <!-- Backlink Proof URL -->
        <div>
          <label for="edit-backlink-url" class="block text-sm font-medium text-gray-700 mb-2">
            Backlink Proof URL (Optional)
          </label>
          <input 
            type="url" 
            id="edit-backlink-url" 
            name="backlink-url"
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
            placeholder="https://yourwebsite.com/page-with-link-to-us"
          />
          <p class="text-sm text-gray-500 mt-2">
            Link to Abbotsford's Best from your website to be featured as a "Friend of Abbotsford's Best"
          </p>
        </div>

        <!-- Friends and Similar Checkboxes -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="flex items-start space-x-3">
            <input 
              type="checkbox" 
              id="edit-friends" 
              name="friends"
              class="mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label for="edit-friends" class="text-sm text-gray-700">
              <strong>Friends of Abbotsford's Best</strong><br/>
              <span class="text-gray-500">Check this if they link back to us from their website. This will feature the business in the "Friends" section of relevant category pages.</span>
            </label>
          </div>
          
          <div class="flex items-start space-x-3">
            <input 
              type="checkbox" 
              id="edit-similar" 
              name="similar"
              class="mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            />
            <label for="edit-similar" class="text-sm text-gray-700">
              <strong>Similar Business</strong><br/>
              <span class="text-gray-500">Check this to list them in the "Similar Businesses" section of relevant category pages.</span>
            </label>
          </div>
        </div>

        <!-- Status -->
        <div>
          <label for="edit-status" class="block text-sm font-medium text-gray-700 mb-2">
            Status
          </label>
          <select 
            id="edit-status" 
            name="status"
            class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
          >
            <option value="pending">Pending</option>
            <option value="approved">Approved</option>
            <option value="rejected">Rejected</option>
          </select>
        </div>

        <!-- Submit Button -->
        <div class="flex justify-end space-x-4 pt-6 border-t border-gray-200">
          <button 
            type="button"
            id="cancel-business-btn"
            class="px-6 py-3 border border-gray-300 rounded-xl text-gray-700 hover:bg-gray-50 transition-colors duration-200"
          >
            Cancel
          </button>
          <button 
            type="submit"
            class="px-6 py-3 bg-primary-700 text-white rounded-xl hover:bg-primary-800 transition-colors duration-200"
          >
            Update Business
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
import { supabase } from '../lib/supabaseClient.js';

document.addEventListener('DOMContentLoaded', function() {
  const modal = document.getElementById('business-edit-modal');
  const form = document.getElementById('business-edit-form');
  const closeBtn = document.getElementById('close-business-modal');
  const cancelBtn = document.getElementById('cancel-business-btn');
  const fileInput = document.getElementById('edit-logo');
  const dropZone = fileInput?.parentElement;
  const createCategoryBtn = document.getElementById('create-category-btn');
  const newCategoryInput = document.getElementById('edit-new-category');
  const categorySelect = document.getElementById('edit-categories');
  const modalFormMessage = document.getElementById('modal-form-message');
  const modalSuccessMessage = document.getElementById('modal-success-message');
  const modalErrorMessage = document.getElementById('modal-error-message');
  const modalSuccessText = document.getElementById('modal-success-text');
  const modalErrorText = document.getElementById('modal-error-text');
  const featuredCategoriesSection = document.getElementById('featured-categories-section');
  const featuredCategoriesContainer = document.getElementById('featured-categories-container');

  // Function to show success message in modal
  function showModalSuccessMessage(message) {
    modalFormMessage.classList.remove('hidden');
    modalSuccessMessage.classList.remove('hidden');
    modalErrorMessage.classList.add('hidden');
    modalSuccessText.textContent = message;
    
    // Scroll to message within modal
    modalFormMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }

  // Function to handle post-success actions
  function handlePostSuccess(shouldReloadPage = true, businessData = null) {
    const businessIndex = form.dataset.businessIndex ? parseInt(form.dataset.businessIndex) : undefined;
    
    // Close modal after showing success message for 2 seconds
    setTimeout(() => {
      closeModal();
      
      // Dispatch custom event to notify parent page
      const event = new CustomEvent('businessProcessed', {
        detail: { 
          shouldReloadPage,
          businessData,
          businessIndex
        }
      });
      document.dispatchEvent(event);
    }, 2000);
  }

  // Function to show error message in modal
  function showModalErrorMessage(message) {
    modalFormMessage.classList.remove('hidden');
    modalErrorMessage.classList.remove('hidden');
    modalSuccessMessage.classList.add('hidden');
    modalErrorText.textContent = message;
    
    // Scroll to message within modal
    modalFormMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
    
    // Auto-hide after 6 seconds
    setTimeout(() => {
      modalFormMessage.classList.add('hidden');
      modalErrorMessage.classList.add('hidden');
    }, 6000);
  }

  // Track existing categories for duplicate checking
  let existingCategories = [];
  
  // Track initial featured categories state
  let initialFeaturedCategories = [];
  
  // Populate existing categories from the select options
  if (categorySelect) {
    existingCategories = Array.from(categorySelect.options).map(option => ({
      slug: option.value,
      name: option.textContent
    }));
  }

  // Function to generate slug from category name (same logic as backend)
  function generateSlug(categoryName) {
    return categoryName
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');
  }

  // Function to check if category already exists
  function categoryExists(categoryName) {
    const slug = generateSlug(categoryName);
    return existingCategories.some(cat => cat.slug === slug);
  }

  // Function to show/hide create category button
  function updateCreateCategoryButton() {
    const categoryName = newCategoryInput.value.trim();
    
    if (categoryName && !categoryExists(categoryName)) {
      createCategoryBtn.classList.remove('hidden');
    } else {
      createCategoryBtn.classList.add('hidden');
    }
    
    // Hide any previous messages
    document.getElementById('category-creation-message').classList.add('hidden');
    document.getElementById('category-creation-success').classList.add('hidden');
    document.getElementById('category-creation-error').classList.add('hidden');
  }

  // Listen for changes in the new category input
  newCategoryInput?.addEventListener('input', updateCreateCategoryButton);

  // Handle create category button click
  createCategoryBtn?.addEventListener('click', async function() {
    const categoryName = newCategoryInput.value.trim();
    
    if (!categoryName) {
      return;
    }
    
    if (categoryExists(categoryName)) {
      showCategoryCreationError('Category already exists');
      return;
    }
    
    // Show loading state
    createCategoryBtn.disabled = true;
    document.getElementById('create-category-btn-text').textContent = 'Creating...';
    document.getElementById('create-category-spinner').classList.remove('hidden');
    
    try {
      const response = await fetch('/api/admin/categories/create-from-submission', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ new_category: categoryName })
      });
      
      const result = await response.json();
      
      if (response.ok && result.success) {
        // Success - add the new category to our tracking and select options
        const newCategory = result.data;
        existingCategories.push({
          slug: newCategory.slug,
          name: newCategory.category_name
        });
        
        // Add new option to the select dropdown
        const newOption = document.createElement('option');
        newOption.value = newCategory.slug;
        newOption.textContent = newCategory.category_name;
        newOption.selected = true;
        categorySelect.appendChild(newOption);
        
        // Clear the new category input
        newCategoryInput.value = '';
        
        // Hide the create button
        createCategoryBtn.classList.add('hidden');
        
        // Show success message
        showCategoryCreationSuccess(`Category "${newCategory.category_name}" created and selected!`);
        
      } else {
        showCategoryCreationError(result.error || 'Failed to create category');
      }
    } catch (error) {
      console.error('Error creating category:', error);
      showCategoryCreationError('Network error. Please try again.');
    } finally {
      // Reset button state
      createCategoryBtn.disabled = false;
      document.getElementById('create-category-btn-text').textContent = 'Create Category';
      document.getElementById('create-category-spinner').classList.add('hidden');
    }
  });

  // Helper functions for showing messages
  function showCategoryCreationSuccess(message) {
    document.getElementById('category-creation-message').classList.remove('hidden');
    document.getElementById('category-creation-success').classList.remove('hidden');
    document.getElementById('category-creation-error').classList.add('hidden');
    document.getElementById('category-creation-success-text').textContent = message;
  }

  function showCategoryCreationError(message) {
    document.getElementById('category-creation-message').classList.remove('hidden');
    document.getElementById('category-creation-error').classList.remove('hidden');
    document.getElementById('category-creation-success').classList.add('hidden');
    document.getElementById('category-creation-error-text').textContent = message;
  }

  // Function to render featured category checkboxes
  function renderFeaturedCategoryCheckboxes(businessCategories, featuredCategories) {
    if (!businessCategories || businessCategories.length === 0) {
      featuredCategoriesSection.classList.add('hidden');
      return;
    }
    
    featuredCategoriesSection.classList.remove('hidden');
    featuredCategoriesContainer.innerHTML = '';
    
    businessCategories.forEach(categorySlug => {
      // Find the category name from existing categories
      const categoryData = existingCategories.find(cat => cat.slug === categorySlug);
      const categoryName = categoryData ? categoryData.name : categorySlug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
      
      // Find if this category is featured and get its position
      const featuredCategory = featuredCategories.find(cat => cat.slug === categorySlug);
      const currentPosition = featuredCategory ? featuredCategory.position : null;
      
      const checkboxContainer = document.createElement('div');
      checkboxContainer.className = 'bg-gray-50 rounded-lg p-4 border border-gray-200';
      
      checkboxContainer.innerHTML = `
        <div class="flex items-center justify-between mb-3">
          <h4 class="font-medium text-gray-900">${categoryName}</h4>
          <span class="text-xs text-gray-500 bg-blue-100 px-2 py-1 rounded-full">Category</span>
        </div>
        <p class="text-sm text-gray-600 mb-3">Select a featured position for this business on the ${categoryName} category page:</p>
        <div class="space-y-2">
          <label class="flex items-center">
            <input 
              type="radio" 
              name="feature-position-${categorySlug}" 
              value=""
              data-category-slug="${categorySlug}"
              ${!currentPosition ? 'checked' : ''}
              class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300"
            />
            <span class="ml-2 text-sm text-gray-700">Not Featured</span>
          </label>
          <label class="flex items-center">
            <input 
              type="radio" 
              name="feature-position-${categorySlug}" 
              value="1"
              data-category-slug="${categorySlug}"
              ${currentPosition === 1 ? 'checked' : ''}
              class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300"
            />
            <span class="ml-2 text-sm text-gray-700"><strong>Position 1</strong> - Top featured spot</span>
          </label>
          <label class="flex items-center">
            <input 
              type="radio" 
              name="feature-position-${categorySlug}" 
              value="2"
              data-category-slug="${categorySlug}"
              ${currentPosition === 2 ? 'checked' : ''}
              class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300"
            />
            <span class="ml-2 text-sm text-gray-700"><strong>Position 2</strong> - Second featured spot</span>
          </label>
          <label class="flex items-center">
            <input 
              type="radio" 
              name="feature-position-${categorySlug}" 
              value="3"
              data-category-slug="${categorySlug}"
              ${currentPosition === 3 ? 'checked' : ''}
              class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300"
            />
            <span class="ml-2 text-sm text-gray-700"><strong>Position 3</strong> - Third featured spot</span>
          </label>
        </div>
      `;
      
      featuredCategoriesContainer.appendChild(checkboxContainer);
    });
  }

  // Handle file upload
  dropZone?.addEventListener('click', function() {
    fileInput?.click();
  });

  dropZone?.addEventListener('dragover', function(e) {
    e.preventDefault();
    dropZone.classList.add('border-primary-400');
  });

  dropZone?.addEventListener('dragleave', function(e) {
    e.preventDefault();
    dropZone.classList.remove('border-primary-400');
  });

  dropZone?.addEventListener('drop', function(e) {
    e.preventDefault();
    dropZone.classList.remove('border-primary-400');
    
    const files = e.dataTransfer?.files;
    if (files && files.length > 0 && fileInput) {
      fileInput.files = files;
    }
  });

  // Listen for custom event to open modal
  document.addEventListener('openBusinessEditModal', async function(e) {
    const submissionId = e.detail.submissionId;
    const extractedData = e.detail.extractedData;
    const reloadOnSuccess = e.detail.reloadOnSuccess !== false; // Default to true
    const businessIndex = e.detail.businessIndex;
    
    // Reset initial featured categories
    initialFeaturedCategories = [];
    
    let submission;
    
    if (extractedData) {
      // Use extracted data for new submission
      submission = extractedData;
    } else if (submissionId) {
      // Fetch existing submission data
      try {
        const response = await fetch(`/api/admin/submissions/${submissionId}`);
        if (response.ok) {
          submission = await response.json();
          
          // Fetch featured status for existing submissions
          try {
            const featuredResponse = await fetch(`/api/admin/get-business-featured-status?businessId=${submissionId}`);
            if (featuredResponse.ok) {
              const featuredData = await featuredResponse.json();
              initialFeaturedCategories = featuredData.featuredCategories || [];
            }
          } catch (featuredError) {
            console.error('Error fetching featured status:', featuredError);
          }
        } else {
          alert('Error loading business data');
          return;
        }
      } catch (error) {
        console.error('Error fetching business:', error);
        alert('Error loading business data');
        return;
      }
    } else {
      alert('No submission data provided');
      return;
    }
    
    // Store reload preference for use in form submission
    form.dataset.reloadOnSuccess = reloadOnSuccess;
    
    // Store business index if provided (for search results)
    if (typeof businessIndex === 'number') {
      form.dataset.businessIndex = businessIndex;
    } else {
      delete form.dataset.businessIndex;
    }
    
    // Populate form fields
    document.getElementById('submission-id').value = submissionId || '';
    document.getElementById('current-logo-url').value = submission.logo_url || '';
    document.getElementById('edit-business-name').value = submission.name || '';
    document.getElementById('edit-address').value = submission.address || '';
    document.getElementById('edit-phone').value = submission.phone || '';
    document.getElementById('edit-email').value = submission.email || '';
    document.getElementById('edit-website').value = submission.website || '';
    document.getElementById('edit-description').value = submission.description || '';
    document.getElementById('edit-new-category').value = submission.new_category || '';
    document.getElementById('edit-backlink-url').value = submission.backlink_url || '';
    document.getElementById('edit-status').value = submission.status || 'pending';
    document.getElementById('edit-friends').checked = submission.friends || false;
    document.getElementById('edit-similar').checked = submission.similar || false;
    
    // Update create category button visibility
    updateCreateCategoryButton();
    
    // Handle logo preview
    const logoPreview = document.getElementById('edit-logo-preview');
    const currentLogo = document.getElementById('current-logo');
    if (submission.logo_url) {
      currentLogo.src = submission.logo_url;
      logoPreview.classList.remove('hidden');
    } else {
      logoPreview.classList.add('hidden');
    }
    
    // Set selected categories
    const categorySelect = document.getElementById('edit-categories');
    Array.from(categorySelect.options).forEach(option => {
      option.selected = (submission.categories || []).includes(option.value);
    });
    
    // Render featured category checkboxes
    renderFeaturedCategoryCheckboxes(submission.categories || [], initialFeaturedCategories);
    
    modal.classList.remove('hidden');
  });
        
  // Close modal
  function closeModal() {
    // Hide any messages when closing
    modalFormMessage.classList.add('hidden');
    modalSuccessMessage.classList.add('hidden');
    modalErrorMessage.classList.add('hidden');
    modal.classList.add('hidden');
  }

  closeBtn?.addEventListener('click', closeModal);
  cancelBtn?.addEventListener('click', closeModal);

  // Close modal when clicking outside
  modal?.addEventListener('click', function(e) {
    if (e.target === modal) {
      closeModal();
    }
  });

  // Handle form submission
  form?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    // Custom validation for categories
    const categoriesError = form.querySelector('#edit-categories-error');
    
    const selectedCategories = Array.from(categorySelect.selectedOptions).map(option => option.value);
    const newCategoryValue = newCategoryInput?.value.trim();
    
    // Reset error state
    categoriesError.classList.add('hidden');
    categorySelect.classList.remove('border-red-500');
    newCategoryInput.classList.remove('border-red-500');
    
    // Validate that either categories are selected OR a new category is suggested
    if (selectedCategories.length === 0 && !newCategoryValue) {
      categoriesError.classList.remove('hidden');
      categorySelect.classList.add('border-red-500');
      newCategoryInput.classList.add('border-red-500');
      
      // Scroll to the error
      categorySelect.scrollIntoView({ behavior: 'smooth', block: 'center' });
      return;
    }
    
    const submitButton = form.querySelector('button[type="submit"]');
    const originalText = submitButton.textContent;
    submitButton.textContent = 'Updating...';
    submitButton.disabled = true;
    
    try {
      const formData = new FormData(form);
      const submissionId = formData.get('submission-id');
      
      // Get business categories from the selected categories
      const businessCategories = Array.from(categorySelect.selectedOptions).map(option => option.value);
      
      // Prepare submission data
      const submissionData = {
        id: submissionId,
        name: formData.get('business-name'),
        address: formData.get('address'),
        phone: formData.get('phone'),
        email: formData.get('email'),
        website: formData.get('website'),
        categories: selectedCategories,
        new_category: formData.get('new-category') || null,
        description: formData.get('description'),
        backlink_url: formData.get('backlink-url') || null,
        status: formData.get('status'),
        friends: formData.get('friends') === 'on',
        similar: formData.get('similar') === 'on'
      };
      
      // Handle logo upload if present
      const logoFile = formData.get('logo');
      const currentLogoUrl = formData.get('current-logo-url');
      
      if (logoFile && logoFile.size > 0) {
        const fileExt = logoFile.name.split('.').pop();
        const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;
        
        const { data: uploadData, error: uploadError } = await supabase.storage
          .from('business-logos')
          .upload(fileName, logoFile);
          
        if (uploadError) {
          console.error('Logo upload error:', uploadError);
        } else {
          const { data: { publicUrl } } = supabase.storage
            .from('business-logos')
            .getPublicUrl(fileName);
          submissionData.logo_url = publicUrl;
        }
      } else if (currentLogoUrl) {
        // Preserve existing logo URL if no new file is uploaded
        submissionData.logo_url = currentLogoUrl;
      }
      
      // Handle featured categories
      const currentFeaturedCategories = [];
      
      // Get all radio button groups for featured positions
      businessCategories.forEach(categorySlug => {
        const selectedRadio = document.querySelector(`input[name="feature-position-${categorySlug}"]:checked`);
        if (selectedRadio && selectedRadio.value) {
          currentFeaturedCategories.push({
            slug: categorySlug,
            position: parseInt(selectedRadio.value)
          });
        }
      });
      
      // Determine which categories to feature and unfeature
      const categoriesToFeature = currentFeaturedCategories.filter(currentCat => 
        !initialFeaturedCategories.some(initialCat => 
          initialCat.slug === currentCat.slug && initialCat.position === currentCat.position
        )
      );
      
      const categoriesToUnfeature = initialFeaturedCategories.filter(initialCat => 
        !currentFeaturedCategories.some(currentCat => 
          currentCat.slug === initialCat.slug && currentCat.position === initialCat.position
        )
      );
      
      // Add featured categories data to submission
      submissionData.categoriesToFeature = categoriesToFeature;
      submissionData.categoriesToUnfeature = categoriesToUnfeature;
      
      // Update in database
      const isNewSubmission = !formData.get('submission-id');
      const apiEndpoint = isNewSubmission ? '/api/admin/submissions/create' : '/api/admin/submissions/update';
      
      const response = await fetch(apiEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(submissionData)
      });
      
      if (response.ok) {
        const responseData = await response.json();
        const shouldReloadPage = form.dataset.reloadOnSuccess === 'true';
        
        if (isNewSubmission) {
          showModalSuccessMessage('Business submission created successfully!');
          handlePostSuccess(shouldReloadPage, responseData.data);
        } else {
          showModalSuccessMessage('Business submission updated successfully!');
          handlePostSuccess(shouldReloadPage, responseData.data);
        }
      } else {
        const error = await response.json();
        showModalErrorMessage(`Error updating business: ${error.error || 'Unknown error'}`);
      }
      
    } catch (error) {
      console.error('Update error:', error);
      showModalErrorMessage('There was an error updating the business. Please try again.');
    } finally {
      submitButton.textContent = originalText;
      submitButton.disabled = false;
    }
  });
  
  if (categorySelect) {
    categorySelect.addEventListener('change', function() {
      const selectedCategories = Array.from(this.selectedOptions).map(option => option.value);
      renderFeaturedCategoryCheckboxes(selectedCategories, initialFeaturedCategories);
    });
  }
});
</script>